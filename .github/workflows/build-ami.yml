name: Build and Deploy AMI

# on:
#   workflow_dispatch:
#   pull_request:
#     branches: 
#       - main
#     types: [closed]
on:
  workflow_dispatch:
  pull_request:
    branches: [main]

jobs:
  integration-tests:
    # if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup MySQL Database
      run: |
        sudo /etc/init.d/mysql start
        mysql -h 127.0.0.1 --port 3306 -u root -p'${{ secrets.ROOT_DB_PASSWORD }}' -e "CREATE USER '${{ vars.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';"  
        mysql -h 127.0.0.1 --port 3306 -u root -p'${{ secrets.ROOT_DB_PASSWORD }}' -e "GRANT ALL ON *.* TO '${{ vars.DB_USER }}'@'localhost';"
        mysql -h 127.0.0.1 --port 3306 -u root -p'${{ secrets.ROOT_DB_PASSWORD }}' -e "FLUSH PRIVILEGES;"
        mysql -h 127.0.0.1 --port 3306 -u root -p'${{ secrets.ROOT_DB_PASSWORD }}' -e "CREATE DATABASE ${{ vars.DB_NAME }};"

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Setup envirornment variables
      run: |
        touch .env
        echo PORT=${{ vars.PORT }} >> .env
        echo DB_HOST=${{ vars.DB_HOST }} >> .env
        echo DB_NAME=${{ vars.DB_NAME}} >> .env
        echo DB_USER=${{ vars.DB_USER }} >> .env
        echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
        echo DB_DIALECT=${{ vars.DB_DIALECT }} >> .env
        echo NODE_ENV=${{ vars.NODE_ENV }} >> .env


    - name: Install dependencies
      run: npm install

    - name: Run integration tests
      run: npm test

  build_and_deploy_ami:
    needs: integration-tests
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: zip application
        run: zip -r webapp.zip .

      - name: Setup packer envirornment variables
        run: |
          touch ./packer/ami.pkvars.hcl
          echo aws_region=\"${{ vars.AWS_REGION }}\" >> ./packer/ami.pkvars.hcl
          echo source_ami_filter=\"${{ vars.SOURCE_AMI_FILTER }}\" >> ./packer/ami.pkvars.hcl
          echo ssh_username=\"${{ vars.SSH_USERNAME}}\" >> ./packer/ami.pkvars.hcl
          echo instance_type=\"${{ vars.INSTANCE_TYPE }}\" >> ./packer/ami.pkvars.hcl
          echo dev_id=\"${{ secrets.DEV_ID }}\" >> ./packer/ami.pkvars.hcl
          echo demo_id=\"${{ secrets.DEMO_ID }}\" >> ./packer/ami.pkvars.hcl
          echo profile=\"${{ vars.PROFILE }}\" >> ./packer/ami.pkvars.hcl
          echo root_device_type=\"${{ vars.ROOT_DEVICE_TYPE }}\" >> ./packer/ami.pkvars.hcl
          echo virtualization_type=\"${{ vars.VIRTUALIZATION_TYPE }}\" >> ./packer/ami.pkvars.hcl
          echo device_name=\"${{ vars.DEVICE_NAME }}\" >> ./packer/ami.pkvars.hcl
          echo volume_size=\"${{ vars.VOLUME_SIZE }}\" >> ./packer/ami.pkvars.hcl
          echo volume_type=\"${{ vars.VOLUME_TYPE }}\" >> ./packer/ami.pkvars.hcl

      - name: Packer init
        run: |
          packer init ./packer/ami.pkr.hcl

      - name: Build AMI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          packer build --var-file=./packer/ami.pkvars.hcl ./packer/ami.pkr.hcl
          # Install jq to parse JSON data and map it to the shell variable
          sudo apt-get install jq
          ami_id=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)
          echo "AMI_ID=$ami_id" >> $GITHUB_ENV
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_DEV_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_DEV_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update Launch Template and Trigger Instance Refresh
        run: |
          # Update Launch Template version with the latest AMI ID
          aws ec2 create-launch-template-version --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} --version-description WebVersion2 --source-version 1 --launch-template-data '{"ImageId":"${{ env.AMI_ID }}"}'

          # Issue command to auto-scaling group for instance refresh
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }}

      - name: Wait for Instance Refresh to Complete
        run: |
          # Use AWS CLI to check the status of instance refresh
          status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }} --query 'InstanceRefreshes[0].Status' --output text)
          while [[ "$status" != "Successful" && "$status" != "Failed" ]]; do
            sleep 60
            status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ secrets.AUTO_SCALING_GROUP_NAME }} --query 'InstanceRefreshes[0].Status' --output text)
          done

          # Exit with an error if instance refresh failed
          if [ "$status" == "Failed" ]; then
            exit 1
          fi
